buildscript {
    repositories {
        jcenter()
        maven {
            url 'http://repo.jenkins-ci.org/releases/'
        }
    }
    dependencies {
        classpath 'org.jenkins-ci.tools:gradle-jpi-plugin:0.18.1'
    }
}

defaultTasks 'clean', 'jpi'

/**
=== Usage ===

gradlew jpi - Build the Jenkins plugin file, which can then be found in the build directory. The file will currently end in ".hpi".
gradlew publishToMavenLocal - Build the Jenkins plugin and install it into your local Maven repository.
gradlew publish - Deploy your plugin to the Jenkins Maven repository to be included in the Update Center.
gradlew server - Start a local instance of Jenkins (http://localhost:8080) with the plugin pre-installed for testing and debugging.
 */

apply plugin: 'org.jenkins-ci.jpi'
apply from: "$rootDir/gradle/common.gradle"
apply plugin: 'jacoco'	

repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'http://repo.jenkins-ci.org/releases/'
    }
}

ext."jenkins.httpPort" = 19091

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

check.dependsOn jacocoTestReport

// Integration Test Structure
test {
    exclude '**/integration/**'
    reports {
        junitXml.enabled = false
        html.enabled = false
    }
}

task integTest(type: Test) {
    testClassesDir = sourceSets.test.output.classesDir
    classpath = sourceSets.test.runtimeClasspath
    include '**/integration/**'
    outputs.upToDateWhen { false }
    reports {
        junitXml.enabled = false
        html.enabled = false
    }
}

task startJenkins(type: JenkinsServerTask){}

integTest.dependsOn startJenkins

check.dependsOn integTest

jenkinsPlugin {
    coreVersion = '1.581' // >= 1.592 contains fix for https://issues.jenkins-ci.org/browse/JENKINS-29359
    shortName = project.name
    displayName = jenkinsDisplayName
    url = "https://wiki.jenkins-ci.org/display/JENKINS/$jenkinsDisplayName"
    gitHubUrl = "https://github.com/jenkinsci/$project.name"
    compatibleSinceVersion = '1.20'
    fileExtension = 'hpi'
    developers {
        developer {
            id 'nickg'
            name 'Nick Grealy'
            email 'nickgrealy@gmail.com'
        }
    }
}

configurations { forceGroovy }

dependencies {
    forceGroovy "org.codehaus.groovy:groovy-all:2.4.7"
	compile 'org.apache.ivy:ivy:2.4.0' // For @Grab

    testCompile('org.hamcrest:hamcrest-core:1.3') { force = true }
    testCompile('junit:junit:4.12') { force = true }
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile "info.cukes:cucumber-junit:1.2.4"
    testCompile "info.cukes:cucumber-java:1.2.4"
    testCompile('org.codehaus.groovy.modules.http-builder:http-builder:0.7')
}

task deleteTarget(type: Delete) {
    delete 'target', 'out', 'work'
}

clean.dependsOn deleteTarget

jpi {
    classpath configurations.forceGroovy // add the Groovy lib to the plugin to make @Grap work
}

/**
 * We must exclude the junit-dep dependency, because it is clashing with junit when we run the AcceptanceTests.
 */
configurations.findAll {!it.name.endsWith('junit-dep')}.each { conf ->
    conf.exclude group: "junit", module: "junit-dep"
}

//configurations.all {
//    resolutionStrategy {
//        // fail eagerly on version conflict (includes transitive dependencies)
//        // e.g. multiple different versions of the same dependency (group and name are equal)
//        // failOnVersionConflict()
//
//        eachDependency { DependencyResolveDetails details ->
//            if (details.requested.group == 'xalan') {
//                details.useVersion '2.7.2'
//            }
//        }
//    }
//}


import java.util.jar.JarFile

/**
 * Task that starts Jenkins in place with the current plugin.
 *
 * @author Kohsuke Kawaguchi
 */
class JenkinsServerTask extends DefaultTask {
    private static final String HTTP_PORT = 'jenkins.httpPort'

    @TaskAction
    def start() {
        def c = project.configurations.getByName(org.jenkinsci.gradle.plugins.jpi.JpiPlugin.WAR_DEPENDENCY_CONFIGURATION_NAME)
        def files = c.resolve()
        if (files.isEmpty()) {
            throw new GradleException('No jenkins.war dependency is specified')
        }
        File war = files.toArray()[0]

        generateHpl()
        copyPluginDependencies()

        def conv = project.extensions.getByType(org.jenkinsci.gradle.plugins.jpi.JpiExtension)
        System.setProperty('JENKINS_HOME', conv.workDir.absolutePath)
        setSystemPropertyIfEmpty('stapler.trace', 'true')
        setSystemPropertyIfEmpty('stapler.jelly.noCache', 'true')
        setSystemPropertyIfEmpty('debug.YUI', 'true')

        List<String> args = []
        String port = project.properties[HTTP_PORT] ?: System.properties[HTTP_PORT]
        println "Using port: $port"
        if (port) {
            args << "--httpPort=${port}"
        }

        def cl = new URLClassLoader([war.toURI().toURL()] as URL[])
        def mainClass = new JarFile(war).manifest.mainAttributes.getValue('Main-Class')
        cl.loadClass(mainClass).main(args as String[])

        // make the thread hang
//        Thread.currentThread().join()
    }

    void generateHpl() {
        def m = new org.jenkinsci.gradle.plugins.jpi.JpiHplManifest(project)
        def conv = project.extensions.getByType(org.jenkinsci.gradle.plugins.jpi.JpiExtension)

        def hpl = new File(conv.workDir, "plugins/${conv.shortName}.hpl")
        hpl.parentFile.mkdirs()
        hpl.withOutputStream { m.write(it) }
    }

    private copyPluginDependencies() {
        // create new configuration with plugin dependencies, ignoring the (jar) extension to get the HPI/JPI files
        Configuration plugins = project.configurations.create('plugins')
        project.configurations.getByName(org.jenkinsci.gradle.plugins.jpi.JpiPlugin.PLUGINS_DEPENDENCY_CONFIGURATION_NAME).dependencies.each {
            project.dependencies.add(plugins.name, "${it.group}:${it.name}:${it.version}")
        }

        // copy the resolved HPI/JPI files to the plugins directory
        def workDir = project.extensions.getByType(org.jenkinsci.gradle.plugins.jpi.JpiExtension).workDir
        plugins.resolvedConfiguration.resolvedArtifacts.findAll { it.extension in ['hpi', 'jpi'] }.each {
            GFileUtils.copyFile(it.file, new File(workDir, "plugins/${it.name}.${it.extension}"))
        }
    }

    private static void setSystemPropertyIfEmpty(String name, String value) {
        if (!System.getProperty(name)) {
            System.setProperty(name, value)
        }
    }

    public static final String TASK_NAME = 'server'
}